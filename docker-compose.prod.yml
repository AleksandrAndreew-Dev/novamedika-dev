services:
  web:
    env_file: .env
    build: .
    healthcheck:
      test: ["CMD-SHELL",  "pgrep gunicorn"]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
      - ./mysite:/app/mysite
      - ./staticfiles:/app/mysite/staticfiles
      - ./media:/app/mysite/media
      - ./temp_csv:/app/temp_csv
    environment:
      - DEBUG=${DEBUG_PROD}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS_PROD}
      - PYTHONPATH=/app
      - DJANGO_SETTINGS_MODULE=mysite.settings
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
    ports:
      - "8000:8000"
    depends_on:
      elasticsearch-node-1:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app_network

  nginx:
    image: nginx:latest
    env_file: .env
    environment:
      - NGINX_HOST=${NGINX_HOST_PROD}
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./staticfiles:/usr/share/nginx/static
      - ./media:/usr/share/nginx/media
    depends_on:
      web:
        condition: service_started
    networks:
      - app_network

  db:
    image: postgres:latest
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  redis:
    image: redis:latest
    command: redis-server --requirepass 'dsdasddcklod'
    mem_limit: 512m
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  elasticsearch-node-1:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    env_file: .env
    environment:
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.enabled=false
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - node.name=elasticsearch-node-1
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"  # Reduced memory for better compatibility
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data_node1:/usr/share/elasticsearch/data
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s -u ${ELASTIC_USER}:${ELASTIC_PASSWORD} http://localhost:9200/_cluster/health |
        grep -Eq '\"status\":\"(green|yellow)\"'"
        ]
      interval: 30s
      timeout: 300s
      retries: 5
    restart: unless-stopped
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app_network

  celery_beat:
    build: .
    command: celery -A mysite beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      - redis
      - rabbitmq
      - db
      - web
    environment:
      - PYTHONPATH=/app
      - DJANGO_SETTINGS_MODULE=mysite.settings
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
    volumes:
      - ./media:/app/mysite/media
      - ./temp_csv:/app/temp_csv
    networks:
      - app_network

  celery_worker:
    build: .
    command: celery -A mysite worker -l INFO -E --without-heartbeat --without-mingle --without-gossip
    depends_on:
      - redis
      - rabbitmq
      - db
      - web
    environment:
      - CELERY_BROKER_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
      - CELERY_WORKER_SEND_TASK_EVENTS=1
      - CELERY_TASK_SEND_SENT_EVENT=1
      - PYTHONPATH=/app
      - DJANGO_SETTINGS_MODULE=mysite.settings
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
    volumes:
      - ./media:/app/mysite/media
      - ./temp_csv:/app/temp_csv
    networks:
      - app_network


  flower:
    image: mher/flower
    ports:
      - "5555:5555"
    environment:
      - BROKER_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
      - FLOWER_BASIC_AUTH=${FLOWER_BASIC_AUTH}
    depends_on:
      - rabbitmq
      - celery_worker
    networks:
      - app_network

volumes:
  postgres_data:
  es_data_node1:
  rabbitmq_data:

networks:
  app_network:
    driver: bridge
