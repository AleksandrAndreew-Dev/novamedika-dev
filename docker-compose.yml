

services:
  web:
    build: .
    env_file: .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./mysite:/app/mysite
      - ./staticfiles:/app/mysite/staticfiles
      - ./media:/app/mysite/media
      - ./temp_csv:/app/temp_csv
    depends_on:
      elasticsearch-node-1:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app_network

  nginx:
    image: nginx:latest
    env_file: .env
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./staticfiles:/usr/share/nginx/static
      - ./media:/usr/share/nginx/media
    depends_on:
      web:
        condition: service_started
    networks:
      - app_network

  db:
    image: postgres:latest
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network

  redis:
    image: redis:latest
    mem_limit: 512m
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --requirepass $${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  elasticsearch-node-1:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    environment:
      - xpack.security.enabled=true
      - ELASTIC_USER=${ES_USER}
      - ELASTIC_PASSWORD=${ES_PASSWORD}
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - node.name=elasticsearch-node-1
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data_node1:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -qE '\"status\":\"(green|yellow)\"'" ]
      interval: 30s
      timeout: 120s
      retries: 5
    restart: unless-stopped
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3-management
    env_file: .env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app_network

  celery_beat:
    build: .
    env_file: .env
    environment:
      - CELERY_BROKER_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
    command: celery -A mysite beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      - redis
      - rabbitmq
      - db
      - web
    volumes:
      - ./media:/app/mysite/media
      - ./temp_csv:/app/temp_csv
    networks:
      - app_network

  celery_worker:
    build: .
    env_file: .env
    environment:
      - CELERY_BROKER_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
    command:
      - sh
      - -c
      - "sleep 10 && celery -A mysite worker -l INFO -E --without-heartbeat --without-mingle --without-gossip"
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
      web:
        condition: service_started
    volumes:
      - ./media:/app/mysite/media
      - ./temp_csv:/app/temp_csv
    networks:
      - app_network

  flower:
    image: mher/flower
    env_file: .env
    networks:
      - app_network
    environment:
      - BROKER_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
      - FLOWER_BASIC_AUTH=${FLOWER_BASIC_AUTH}
    depends_on:
      - rabbitmq
      - celery_worker

volumes:
  postgres_data:
  es_data_node1:
  rabbitmq_data:

networks:
  app_network:
    driver: bridge